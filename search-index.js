var searchIndex = {};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"f32","bitflags::__core","Operations and constants for 32-bits floats (`f32` type)",null,null],[17,"RADIX","bitflags::__core::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"f64","bitflags::__core","Operations and constants for 64-bits floats (`f64` type)",null,null],[17,"RADIX","bitflags::__core::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"num","bitflags::__core","Numeric traits and functions for the built-in numeric types.",null,null],[11,"bitand_assign","core::num","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"hash","","",0,null],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[11,"explicit_sig_bits","bitflags::__core::num::dec2flt::rawfp","The number of bits in the singificand, *excluding* the hidden bit.",1,{"inputs":[],"output":{"name":"u8"}}],[11,"max_exp","","The maximum legal exponent in fractional representation.",1,{"inputs":[],"output":{"name":"i16"}}],[11,"min_exp","","The minimum legal exponent in fractional representation, excluding subnormals.",1,{"inputs":[],"output":{"name":"i16"}}],[11,"max_exp_int","","`MAX_EXP` for integral representation, i.e., with the shift applied.",1,{"inputs":[],"output":{"name":"i16"}}],[11,"max_encoded_exp","","`MAX_EXP` encoded (i.e., with offset bias)",1,{"inputs":[],"output":{"name":"i16"}}],[11,"min_exp_int","","`MIN_EXP` for integral representation, i.e., with the shift applied.",1,{"inputs":[],"output":{"name":"i16"}}],[11,"max_sig","","The maximum normalized singificand in integral representation.",1,{"inputs":[],"output":{"name":"u64"}}],[11,"min_sig","","The minimal normalized significand in integral representation.",1,{"inputs":[],"output":{"name":"u64"}}],[11,"fmt","core::num::dec2flt","",2,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",2,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"eq","","",2,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[8,"Zero","bitflags::__core::num","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",3,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","core::num","",5,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",5,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FpCategory","bitflags::__core::num","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",5,null],[13,"Infinite","","Positive or negative infinity",5,null],[13,"Zero","","Positive or negative zero",5,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",5,null],[13,"Normal","","A regular floating point number",5,null],[11,"fmt","core::num","",6,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"eq","","",6,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[3,"ParseIntError","bitflags::__core::num","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[0,"prelude","bitflags::__core","The libcore prelude",null,null],[0,"v1","bitflags::__core::prelude","The core prelude",null,null],[8,"Send","bitflags::__core::prelude::v1","Types that can be transferred across thread boundaries.",null,null],[11,"from_iter","core::result","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",7,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",7,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",7,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",7,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",7,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"is_ok","","Returns true if the result is `Ok`",7,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",7,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",7,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",7,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",7,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",7,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",7,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",7,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",7,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",7,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",7,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",7,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",7,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",7,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","","",7,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"fmt","","",7,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[4,"Result","bitflags::__core::prelude::v1","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",7,null],[13,"Err","","Contains the error value",7,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",8,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",9,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",9,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",10,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",11,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",12,null],[10,"next","","Advances the iterator and returns the next value.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",12,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",12,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",12,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",12,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",12,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",12,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",12,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",12,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",12,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",12,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",12,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",13,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",13,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",14,null],[10,"call_once","","This is called when the call operator is used.",14,null],[5,"drop","","Disposes of a value.",null,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",15,{"inputs":[],"output":{"name":"self"}}],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",16,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",17,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"SliceExt","","Extension methods for slices.",null,null],[16,"Item","","",18,null],[10,"split_at","","",18,null],[10,"iter","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",18,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",18,null],[10,"as_ptr","","",18,null],[10,"binary_search","","",18,null],[10,"binary_search_by","","",18,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",18,null],[10,"split_at_mut","","",18,null],[10,"reverse","","",18,null],[10,"get_unchecked_mut","","",18,null],[10,"as_mut_ptr","","",18,null],[10,"contains","","",18,null],[10,"starts_with","","",18,null],[10,"ends_with","","",18,null],[10,"clone_from_slice","","",18,null],[10,"copy_from_slice","","",18,null],[10,"binary_search_by_key","","",18,{"inputs":[{"name":"sliceext"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",20,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",21,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",21,null],[10,"into_iter","","Creates an iterator from a value.",21,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",22,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",24,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",25,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",26,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"from_iter","core::option","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",27,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",27,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",27,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",27,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",27,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",27,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",27,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",27,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",27,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",27,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",27,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",27,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",27,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",27,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",27,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",27,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",27,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",27,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",27,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",27,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",27,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",27,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",27,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[4,"Option","bitflags::__core::prelude::v1","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",27,null],[13,"Some","","Some value `T`",27,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"nonzero","bitflags::__core","Exposes the NonZero lang item which provides optimization hints.",null,null],[8,"Zeroable","bitflags::__core::nonzero","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[11,"deref","core::nonzero","",28,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",28,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"clone","","",28,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"eq","","",28,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[3,"NonZero","bitflags::__core::nonzero","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations.",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[11,"fmt","core::ptr","",29,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",29,null],[11,"new","","Creates a new `Unique`.",29,null],[11,"get","","Dereferences the content.",29,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",29,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[3,"Unique","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[11,"fmt","core::ptr","",30,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"new","","Creates a new `Shared`.",30,null],[3,"Shared","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[11,"default","core::marker","",31,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","","",31,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"cmp","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"PhantomData","bitflags::__core::marker","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",25,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",32,null],[10,"add","","The method for the `+` operator",32,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",33,null],[10,"sub","","The method for the `-` operator",33,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",34,null],[10,"mul","","The method for the `*` operator",34,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",35,null],[10,"div","","The method for the `/` operator",35,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",36,null],[10,"rem","","The method for the `%` operator",36,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",37,null],[10,"neg","","The method for the unary `-` operator",37,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",38,null],[10,"not","","The method for the unary `!` operator",38,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",39,null],[10,"bitand","","The method for the `&amp;` operator",39,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",40,null],[10,"bitor","","The method for the `|` operator",40,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",41,null],[10,"bitxor","","The method for the `^` operator",41,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",42,null],[10,"shl","","The method for the `&lt;&lt;` operator",42,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",43,null],[10,"shr","","The method for the `&gt;&gt;` operator",43,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",44,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",45,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",46,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",47,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",48,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",49,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",50,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",51,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",52,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",53,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",54,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",54,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",55,null],[11,"fmt","core::ops","",56,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"eq","","",56,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[3,"RangeFull","bitflags::__core::ops","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[11,"contains","core::ops","# Examples",57,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",57,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"next_back","","",57,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",57,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[3,"Range","bitflags::__core::ops","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",57,null],[12,"end","","The upper bound of the range (exclusive).",57,null],[11,"contains","core::ops","# Examples",58,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"eq","","",58,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"next","","",58,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",58,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[3,"RangeFrom","bitflags::__core::ops","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",58,null],[11,"contains","core::ops","# Examples",59,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"eq","","",59,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[3,"RangeTo","bitflags::__core::ops","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",59,null],[11,"contains","core::ops","# Examples",60,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"from","","",60,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",60,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",60,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"next_back","","",60,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",60,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[4,"RangeInclusive","bitflags::__core::ops","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",60,null],[12,"at","bitflags::__core::ops::RangeInclusive","",60,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",60,null],[12,"start","bitflags::__core::ops::RangeInclusive","",60,null],[12,"end","","",60,null],[11,"contains","core::ops","# Examples",61,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",61,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",61,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",62,null],[10,"deref","","The method called to dereference a value",62,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",63,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",11,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",8,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",14,null],[10,"call_once","","This is called when the call operator is used.",14,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",64,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",65,null],[10,"make_place","","Creates a fresh place from `self`.",65,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",66,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",66,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",67,null],[16,"Place","","The place that will negotiate the storage of the data.",67,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",67,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",68,{"inputs":[],"output":{"name":"self"}}],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",9,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",9,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"partial_cmp","core::cmp","",69,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",69,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",69,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",69,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",69,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[4,"Ordering","bitflags::__core::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",69,null],[13,"Equal","","An ordering where a compared value is equal [to another].",69,null],[13,"Greater","","An ordering where a compared value is greater [than another].",69,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",16,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",19,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",13,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",13,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",15,{"inputs":[],"output":{"name":"self"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",10,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",17,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",24,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"Borrow","bitflags::__core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",70,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",71,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",72,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[11,"of","core::any","Returns the `TypeId` of the type this generic function has been\ninstantiated with",73,{"inputs":[],"output":{"name":"typeid"}}],[11,"clone","","",73,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"eq","","",73,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[3,"TypeId","bitflags::__core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"array","bitflags::__core","Implementations of things like `Eq` for fixed-length arrays\nup to a certain length. Eventually we should able to generalize\nto all lengths.",null,null],[8,"FixedSizeArray","bitflags::__core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",74,null],[10,"as_mut_slice","","Converts the array to mutable slice",74,null],[0,"sync","bitflags::__core","Synchronization primitives",null,null],[0,"atomic","bitflags::__core::sync","Atomic types",null,null],[11,"fmt","core::sync::atomic","",75,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicBool`.",75,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",75,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",75,null],[11,"swap","","Stores a value into the bool, returning the old value.",75,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",75,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",75,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",75,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",75,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",75,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",75,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",75,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"atomicbool"}}],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",76,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicIsize`.",76,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",76,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",76,null],[11,"swap","","Stores a value into the isize, returning the old value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize` if the current value is the same as the `current` value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",76,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"atomicisize"}}],[3,"AtomicIsize","bitflags::__core::sync::atomic","A signed integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",77,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicUsize`.",77,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",77,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",77,null],[11,"swap","","Stores a value into the usize, returning the old value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",77,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"atomicusize"}}],[3,"AtomicUsize","bitflags::__core::sync::atomic","An unsigned integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",78,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicPtr`.",78,null],[11,"load","","Loads a value from the pointer.",78,null],[11,"store","","Stores a value into the pointer.",78,null],[11,"swap","","Stores a value into the pointer, returning the old value.",78,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",78,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",78,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",78,null],[11,"default","","",78,{"inputs":[],"output":{"name":"atomicptr"}}],[3,"AtomicPtr","bitflags::__core::sync::atomic","A raw pointer type which can be safely shared between threads.",null,null],[11,"clone","core::sync::atomic","",79,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"fmt","","",79,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","bitflags::__core::sync::atomic","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",79,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",79,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",79,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",79,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",79,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[11,"eq","core::cell","",80,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"cell"}}],[11,"clone","","",80,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"new","","Creates a new `Cell` containing the given value.",80,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",80,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",80,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",80,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"fmt","","",80,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[11,"eq","core::cell","",81,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"refcell"}}],[11,"clone","","",81,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"borrow_state","","Query the current state of this `RefCell`",81,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",81,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",81,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",81,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"new","","Creates a new `RefCell` containing `value`.",81,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",81,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"fmt","","",81,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefCell","bitflags::__core::cell","A mutable memory location with dynamically checked borrow rules",null,null],[11,"clone","core::cell","",82,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"eq","","",82,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"BorrowState","bitflags::__core::cell","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",82,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",82,null],[13,"Unused","","There are no outstanding borrows on this cell.",82,null],[11,"clone","core::cell","Copies a `Ref`.",83,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",83,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",83,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",83,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"fmt","","",83,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Ref","bitflags::__core::cell","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"deref_mut","core::cell","",84,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref","","",84,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",84,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",84,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",84,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefMut","bitflags::__core::cell","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"default","core::cell","",85,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",85,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",85,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",85,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"fmt","","",85,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"UnsafeCell","bitflags::__core::cell","The core primitive for interior mutability in Rust.",null,null],[0,"char","bitflags::__core","Character manipulation.",null,null],[17,"MAX","bitflags::__core::char","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"next","core::char","",86,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"clone","","",86,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",86,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeUnicode","bitflags::__core::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[11,"next","core::char","",87,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"count","","",87,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",87,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",87,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",87,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeDefault","bitflags::__core::char","An iterator that yields the literal escape code of a `char`.",null,null],[11,"next","core::char","",88,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",88,null],[11,"fmt","","",88,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf8","bitflags::__core::char","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[11,"next","core::char","",89,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",89,null],[11,"fmt","","",89,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf16","bitflags::__core::char","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[0,"panicking","bitflags::__core","Panic support for libcore",null,null],[5,"panic","bitflags::__core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[11,"next_back","core::iter","",90,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"next","","",90,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"clone","","",90,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"fmt","","",90,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[11,"next_back","core::iter","",91,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"clone","","",91,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"fmt","","",91,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cloned","bitflags::__core::iter","An iterator that clones the elements of an underlying iterator.",null,null],[11,"next","core::iter","",92,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"clone","","",92,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"fmt","","",92,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cycle","bitflags::__core::iter","An iterator that repeats endlessly.",null,null],[11,"next_back","core::iter","",93,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"next","","",93,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",93,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",93,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",93,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"clone","","",93,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"fmt","","",93,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chain","bitflags::__core::iter","An iterator that strings two iterators together.",null,null],[11,"next_back","core::iter","",94,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"next","","",94,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"fmt","","",94,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Zip","bitflags::__core::iter","An iterator that iterates two other iterators simultaneously.",null,null],[11,"next_back","core::iter","",95,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[3,"Map","bitflags::__core::iter","An iterator that maps the values of `iter` with `f`.",null,null],[11,"next_back","core::iter","",96,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[3,"Filter","bitflags::__core::iter","An iterator that filters the elements of `iter` with `predicate`.",null,null],[11,"next_back","core::iter","",97,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"next","","",97,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[3,"FilterMap","bitflags::__core::iter","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[11,"next_back","core::iter","",98,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"next","","# Overflow Behavior",98,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"nth","","",98,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",98,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"clone","","",98,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"fmt","","",98,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Enumerate","bitflags::__core::iter","An iterator that yields the current count and the element during iteration.",null,null],[11,"peek","core::iter","Returns a reference to the next() value without advancing the iterator.",99,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",99,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"next","","",99,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",99,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",99,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",99,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"clone","","",99,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"fmt","","",99,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Peekable","bitflags::__core::iter","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[11,"next","core::iter","",100,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[3,"SkipWhile","bitflags::__core::iter","An iterator that rejects elements while `predicate` is true.",null,null],[11,"next","core::iter","",101,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[3,"TakeWhile","bitflags::__core::iter","An iterator that only accepts elements while `predicate` is true.",null,null],[11,"next_back","core::iter","",102,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"next","","",102,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",102,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",102,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",102,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"clone","","",102,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"fmt","","",102,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Skip","bitflags::__core::iter","An iterator that skips over `n` elements of `iter`.",null,null],[11,"next","core::iter","",103,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",103,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"clone","","",103,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"fmt","","",103,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Take","bitflags::__core::iter","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[11,"next","core::iter","",104,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[3,"Scan","bitflags::__core::iter","An iterator to maintain state while iterating another iterator.",null,null],[11,"next_back","core::iter","",105,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"next","","",105,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[3,"FlatMap","bitflags::__core::iter","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[11,"next_back","core::iter","",106,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"next","","",106,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",106,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",106,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",106,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",106,null],[11,"clone","","",106,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"fmt","","",106,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Fuse","bitflags::__core::iter","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[11,"next_back","core::iter","",107,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"next","","",107,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[3,"Inspect","bitflags::__core::iter","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",26,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",20,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",22,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",21,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",21,null],[10,"into_iter","","Creates an iterator from a value.",21,null],[11,"default","core::iter::sources","",108,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",108,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"len","","",108,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"next_back","","",108,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"next","","",108,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Empty","bitflags::__core::iter","An iterator that yields nothing.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",109,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",109,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[11,"next","core::iter::range","",110,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next","","",110,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next","","",110,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"clone","","",110,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"fmt","","",110,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"StepBy","bitflags::__core::iter","An adapter for stepping range iterators by a custom amount.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",12,null],[10,"next","","Advances the iterator and returns the next value.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",12,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",12,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",12,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",12,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",12,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",12,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",12,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",12,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",12,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",12,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",12,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",12,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",12,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",12,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",12,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"len","core::iter::sources","",111,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"next_back","","",111,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"next","","",111,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"clone","","",111,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"fmt","","",111,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Once","bitflags::__core::iter","An iterator that yields an element exactly once.",null,null],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",112,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"next_back","core::iter::sources","",113,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"clone","","",113,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"fmt","","",113,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Repeat","bitflags::__core::iter","An iterator that repeats an element endlessly.",null,null],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",27,null],[13,"Some","","Some value `T`",27,null],[11,"clone","core::option","",114,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",114,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::option","An iterator over a reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",115,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",115,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"fmt","","",115,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::option","An iterator over a mutable reference of the contained item in an Option.",null,null],[11,"fmt","core::option","",116,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"clone","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::option","An iterator over the item contained inside an Option.",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[11,"clone","core::raw","",117,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",117,null],[12,"len","","",117,null],[11,"clone","core::raw","",118,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[3,"TraitObject","bitflags::__core::raw","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",118,null],[12,"vtable","","",118,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",119,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",7,null],[13,"Err","","Contains the error value",7,null],[11,"next_back","core::result","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"clone","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",120,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::result","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"fmt","","",121,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::result","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",122,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"fmt","","",122,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::result","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"slice","bitflags::__core","Slice management and manipulation",null,null],[8,"SliceExt","bitflags::__core::slice","Extension methods for slices.",null,null],[16,"Item","","",18,null],[10,"split_at","","",18,null],[10,"iter","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",18,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",18,null],[10,"as_ptr","","",18,null],[10,"binary_search","","",18,null],[10,"binary_search_by","","",18,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",18,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",18,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",18,null],[10,"split_at_mut","","",18,null],[10,"reverse","","",18,null],[10,"get_unchecked_mut","","",18,null],[10,"as_mut_ptr","","",18,null],[10,"contains","","",18,null],[10,"starts_with","","",18,null],[10,"ends_with","","",18,null],[10,"clone_from_slice","","",18,null],[10,"copy_from_slice","","",18,null],[10,"binary_search_by_key","","",18,{"inputs":[{"name":"sliceext"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","core::slice","",123,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",123,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",123,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"count","","",123,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",123,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",123,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",123,null],[11,"fmt","","",123,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::slice","Immutable slice iterator",null,null],[11,"next_back","core::slice","",124,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"count","","",124,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",124,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",124,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",124,null],[11,"fmt","","",124,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::slice","Mutable slice iterator.",null,null],[11,"fmt","core::slice","",125,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",125,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",125,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"clone","","",125,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[3,"Split","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[11,"next_back","core::slice","",126,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",126,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"fmt","","",126,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitMut","bitflags::__core::slice","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[11,"next","core::slice","",127,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"fmt","","",127,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"next","core::slice","",128,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"fmt","","",128,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"next","core::slice","",129,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"fmt","","",129,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"next","core::slice","",130,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"fmt","","",130,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"next_back","core::slice","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"count","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",131,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"fmt","","",131,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Windows","bitflags::__core::slice","An iterator over overlapping subslices of length `size`.",null,null],[11,"next_back","core::slice","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"count","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",132,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"fmt","","",132,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chunks","bitflags::__core::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[11,"next_back","core::slice","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"count","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",133,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","","",133,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ChunksMut","bitflags::__core::slice","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"str","bitflags::__core","String manipulation",null,null],[0,"pattern","bitflags::__core::str","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",134,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",134,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",134,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",134,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",134,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","core::str::pattern","",135,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"eq","","",135,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"SearchStep","bitflags::__core::str::pattern","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",135,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",135,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",135,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",136,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",136,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",136,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",136,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",137,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",137,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",137,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[11,"next_back","core::str::pattern","",138,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",138,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",138,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",138,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",138,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",138,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",138,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"fmt","","",138,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharSearcher","bitflags::__core::str::pattern","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str::pattern","",139,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",139,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",139,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"haystack","","",139,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",139,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",139,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",139,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"fmt","","",139,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharSliceSearcher","bitflags::__core::str::pattern","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str::pattern","",140,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",140,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",140,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"haystack","","",140,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",140,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",140,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",140,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",140,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[3,"CharPredicateSearcher","bitflags::__core::str::pattern","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"fmt","core::str::pattern","",141,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",141,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",141,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",141,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",141,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",141,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[3,"StrSearcher","bitflags::__core::str::pattern","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[8,"FromStr","bitflags::__core::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",142,null],[10,"from_str","","Parses a string `s` to return a value of this type.",142,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","core::str","",143,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",143,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ParseBoolError","bitflags::__core::str","An error returned when parsing a `bool` from a string fails.",null,null],[11,"eq","core::str","",144,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",144,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",144,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[3,"Utf8Error","bitflags::__core::str","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[11,"clone","core::str","",145,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",145,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"next_back","","",145,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"next","","",145,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"fmt","","",145,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chars","bitflags::__core::str","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",146,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"next_back","","",146,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"next","","",146,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"fmt","","",146,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[3,"CharIndices","bitflags::__core::str","Iterator for a string&#39;s characters and their byte offsets.",null,null],[11,"len","core::str","",147,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"next_back","","",147,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"next","","",147,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"count","","",147,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",147,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",147,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",147,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",147,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Bytes","bitflags::__core::str","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[11,"clone","core::str","",148,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",148,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[3,"Split","bitflags::__core::str","Created with the method [`split()`].",null,null],[11,"next_back","core::str","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next","","",149,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",149,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplit","bitflags::__core::str","Created with the method [`rsplit()`].",null,null],[11,"next_back","core::str","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",150,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",150,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitTerminator","bitflags::__core::str","Created with the method [`split_terminator()`].",null,null],[11,"next_back","core::str","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next","","",151,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",151,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitTerminator","bitflags::__core::str","Created with the method [`rsplit_terminator()`].",null,null],[11,"fmt","core::str","",152,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",152,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[3,"SplitN","bitflags::__core::str","Created with the method [`splitn()`].",null,null],[11,"clone","core::str","",153,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"next","","",153,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"fmt","","",153,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::str","Created with the method [`rsplitn()`].",null,null],[11,"clone","core::str","",154,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",154,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"fmt","","",154,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",154,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[3,"MatchIndices","bitflags::__core::str","Created with the method [`match_indices()`].",null,null],[11,"clone","core::str","",155,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next","","",155,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",155,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",155,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[3,"RMatchIndices","bitflags::__core::str","Created with the method [`rmatch_indices()`].",null,null],[11,"clone","core::str","",156,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",156,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",156,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",156,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[3,"Matches","bitflags::__core::str","Created with the method [`matches()`].",null,null],[11,"next","core::str","",157,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",157,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[3,"RMatches","bitflags::__core::str","Created with the method [`rmatches()`].",null,null],[11,"fmt","core::str","",158,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",158,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",158,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"clone","","",158,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[3,"Lines","bitflags::__core::str","Created with the method [`lines()`].",null,null],[11,"clone","core::str","",159,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"fmt","","",159,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",159,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"next","","",159,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[3,"LinesAny","bitflags::__core::str","Created with the method [`lines_any()`].",null,null],[11,"clone","core::str","",160,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","","",160,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharRange","bitflags::__core::str","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",160,null],[12,"next","","Index of the first byte of the next `char`",160,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",161,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",161,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",162,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",162,null],[11,"write_u8","","Write a single `u8` into this hasher",162,null],[11,"write_u16","","Write a single `u16` into this hasher.",162,null],[11,"write_u32","","Write a single `u32` into this hasher.",162,null],[11,"write_u64","","Write a single `u64` into this hasher.",162,null],[11,"write_usize","","Write a single `usize` into this hasher.",162,null],[11,"write_i8","","Write a single `i8` into this hasher.",162,null],[11,"write_i16","","Write a single `i16` into this hasher.",162,null],[11,"write_i32","","Write a single `i32` into this hasher.",162,null],[11,"write_i64","","Write a single `i64` into this hasher.",162,null],[11,"write_isize","","Write a single `isize` into this hasher.",162,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",163,null],[10,"build_hasher","","Creates a new hasher.",163,null],[11,"default","core::hash","",164,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","","",164,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"build_hasher","","",164,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"fmt","","",164,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"BuildHasherDefault","bitflags::__core::hash","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[11,"default","core::hash::sip","",165,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",165,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"write","","",165,null],[11,"finish","","",165,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",165,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",165,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"fmt","","",165,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SipHasher","bitflags::__core::hash","An implementation of SipHash 2-4.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings.",null,null],[11,"fmt","core::fmt","",166,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Alignment","bitflags::__core::fmt","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",166,null],[13,"Right","","Indication that contents should be right-aligned.",166,null],[13,"Center","","Indication that contents should be center-aligned.",166,null],[13,"Unknown","","No alignment was requested.",166,null],[6,"Result","","",null,null],[11,"hash","core::fmt","",167,null],[11,"cmp","","",167,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"eq","","",167,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",167,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",167,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"error"}}],[11,"clone","","",167,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",167,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","bitflags::__core::fmt","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",168,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",168,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",168,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","core::fmt","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",169,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",169,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",169,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",169,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",169,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",169,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",169,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",169,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",169,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",169,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",169,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",169,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",169,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",169,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",169,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",169,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",169,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",169,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",169,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",169,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",169,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"Formatter","bitflags::__core::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[11,"clone","core::fmt","",170,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",170,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Arguments","bitflags::__core::fmt","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",171,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",172,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",173,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",174,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",175,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",176,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",177,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",178,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",179,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",180,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",180,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[3,"DebugStruct","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the set output.",181,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",181,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",181,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[3,"DebugSet","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the list output.",182,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",182,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",182,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[3,"DebugList","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"field","core::fmt::builders","Adds a new field to the generated tuple struct output.",183,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",183,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[3,"DebugTuple","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the map output.",184,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",184,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",184,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[3,"DebugMap","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[3,"Wrapping"],[8,"RawFloat"],[3,"ParseFloatError"],[8,"Zero"],[8,"One"],[4,"FpCategory"],[3,"ParseIntError"],[4,"Result"],[8,"FnMut"],[8,"PartialEq"],[8,"AsRef"],[8,"Fn"],[8,"Iterator"],[8,"Clone"],[8,"FnOnce"],[8,"Default"],[8,"Ord"],[8,"AsMut"],[8,"SliceExt"],[8,"PartialOrd"],[8,"DoubleEndedIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"From"],[8,"Into"],[8,"Drop"],[8,"ExactSizeIterator"],[4,"Option"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[4,"Ordering"],[8,"Borrow"],[8,"BorrowMut"],[8,"Any"],[3,"TypeId"],[8,"FixedSizeArray"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[3,"RefCell"],[4,"BorrowState"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Empty"],[8,"Step"],[3,"StepBy"],[3,"Once"],[8,"FromIterator"],[3,"Repeat"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[8,"Repr"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[8,"FromStr"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[3,"SipHasher"],[4,"Alignment"],[3,"Error"],[8,"Write"],[3,"Formatter"],[3,"Arguments"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"DebugStruct"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugTuple"],[3,"DebugMap"]]};
initSearch(searchIndex);
